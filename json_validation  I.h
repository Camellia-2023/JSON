#pragma once
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>
#include <ctype.h>


// 辅助函数，用于检查字符是否为空白字符
bool isWhitespace(char c) {
    return c == ' ' || c == '\t' || c == '\n' || c == '\r';
}    /*如果字符等于空格、制表符、换行符或回车符中的任何一个，函数返回 true，表示是空白字符；
    否则，返回 false，表示不是空白字符。*/



// 辅助函数，用于检查字符是否为数字的一部分
bool isPartOfNumber(char c) {
    return isdigit(c) || c == '-' || c == '+' || c == '.' || c == 'e' || c == 'E';/*科学计数法中的指数部分的 'e' 或 'E'*/

}  /*如果输入字符是数字的一部分，函数返回 true；否则，返回 false。*/



// 函数，用于检查从当前位置开始的字符串是否为合法的数字
//该函数接受一个指向字符串的指针 str 和一个整数指针 num，并返回一个指向字符常量的指针。
// 如果是合法的数字，返回数字后的第一个字符的位置；如果不是，返回 NULL
const char* checkNumber(const char* str, int* num) {
    const char* ptr = str;//这是声明一个指针 ptr，初始化为输入字符串的起始位置。
    //检查数字是否以负号或正号开头
    if (*ptr == '-' || *ptr == '+') {
        ptr++;
        (*num)++;
    }/*如果字符串的当前位置的字符是减号 '-' 或加号 '+'，则将指针向后移动一位，
     并递增 num 指向的整数。*/



    // 检查整数部分，并计算整数部分的长度
    if (!isdigit(*ptr)) { // 数字必须以数字开始
        return NULL;    /*如果当前指针 ptr 指向的字符不是数字（通过 isdigit 函数判断），
                        则表示数字不是以数字字符开头，函数返回 NULL，表示数字格式不合法。*/
    }
    while (isdigit(*ptr)) { // 跳过整数部分的所有数字
        ptr++;       /*如果数字以数字字符开头，就进入一个循环。在循环中，首先判断 ptr 指向的字符是否是数字（使用 isdigit 函数）。如果是数字，就将指针向后移动一位，同时递增 num 指向的整数。
        这个循环一直执行，直到不再是数字字符为止，即整数部分的所有数字被跳过。*/
        (*num)++;
    }

    // 检查小数部分，并计算小数部分的长度
    if (*ptr == '.') {
        ptr++;
        if (!isdigit(*ptr)) { // 小数点后必须跟着数字
            return NULL;     /*接下来的条件语句检查小数点后是否紧跟着数字。
                         如果不是数字，说明小数点后缺少数字，函数返回 NULL，表示数字格式不合法。*/
        }
        while (isdigit(*ptr)) { // 跳过小数部分的所有数字
            ptr++;
            (*num)++;   /*如果小数点后跟着数字，进入一个循环。在循环中，指针不断向后移动，同时递增 num 指向的整数，
                        直到不再是数字字符为止，即跳过小数部分的所有数字。*/
        }
    }



    // 检查指数部分，并计算指数部分的长度
    if (*ptr == 'e' || *ptr == 'E') {          /*检查当前指针 ptr 指向的字符是指数部分，如果是，执行以下操作。*/
        (*num)++;                              //递增 num 指向的整数，表示遇到一个额外的字符（指数字符）
        ptr++;                                 //将指针向后移动一位，跳过 'e' 或 'E'。
        if (*ptr == '+' || *ptr == '-') { // 指数可以有正负号
            ptr++;
            (*num)++;
        }
        if (!isdigit(*ptr)) { // 指数符号后必须跟着数字
            return NULL;          //如果指数符号后面跟的不是数字，说明指数部分格式不合法，函数返回 NULL。
        }
        while (isdigit(*ptr)) { // 跳过指数部分的所有数字  （如果指数符号后面跟的是数字，balabala......）
            ptr++;
            (*num)++;
        }
    }
    if (*ptr == ' ' || *ptr == '\n')     /*检查当前指针 ptr 指向的字符是否是空格或换行符。
                                      如果是空白字符，表示指数部分结束后可能有额外的空白字符，执行以下操作。*/
    {
        while (*ptr == ' ' || *ptr == '\n') {      /*进入一个循环，递增 num 指向的整数并将指针向后移动，跳过所有连续的空白字符。*/
            (*num)++;
            ptr++;
        }
        if (*ptr == ',' || *ptr == ']' || *ptr == '}') {
            return ptr;
        }                   /*......则表示下一个字符是有效的分隔符，函数返回指向该字符的指针，表示数字解析完成。
                            否则，说明后面还有其他非法字符，函数返回 NULL*/
        else
            return NULL;

    }


    // 允许数字后直接跟着结束括号或逗号
    if (*ptr == ',' || *ptr == ']' || *ptr == '}') {
        return ptr;     //如果是这些分隔符之一，表示数字解析完成，函数返回指向该字符的指针。
    }
    // 如果数字后面是非法字符，则返回 NULL
    if (*ptr != '\0' && !isPartOfNumber(*ptr) && *ptr != ',' && *ptr != ']' && *ptr != '}') {
        return NULL;
    }

    return ptr; /*返回数字后的第一个字符的位置（如果前面的条件都未满足，说明数字后面是合法的字符，
                             函数返回指向该字符的指针，表示该字符是数字后的第一个字符的位置。）*/
}